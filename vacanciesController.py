import re
from telebot import types
import datetime

import config
from databaseRequests import DatabaseRequests
from keyboards import Keyboards
from auxiliary import Auxiliary

class VacanciesController:
    def __init__(self, bot, connection):
        self.bot = bot

        self.connection = connection

        cursor = connection.cursor()
        self.cursor = cursor

        self.db = DatabaseRequests(connection)
        self.keyboard = Keyboards(connection)
        self.auxiliary = Auxiliary(bot, connection)

# -------------- Insert new vacancy steps
    def addNewVacancy(self, chatId, projectId):
        bot = self.bot

        projectName = self.db.getProjectNameById(projectId)

        msg = bot.send_message(chat_id=chatId, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ *{self.auxiliary.filter(projectName)}*\:\n\(_–°—Ç–∞–∂—ë—Ä\-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥_\)", parse_mode="MarkdownV2", reply_markup=self.keyboard.exitBtn())
        bot.register_next_step_handler(msg, self.process_nameOfPostVacancy_step, projectId)

    def process_nameOfPostVacancy_step(self, message, projectId):
        try:
            bot = self.bot

            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return

            post = message.text

            if len(post) < 3:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_nameOfPostVacancy_step, projectId)
                return

            msg = bot.reply_to(message, f'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ *¬´{self.auxiliary.filter(post)}¬ª*\:', parse_mode="MarkdownV2")
            bot.register_next_step_handler(msg, self.process_requirementsVacancy_step, projectId, post) 
        except Exception as e:
            print(e)
            self.auxiliary.exitStepHandler(message, "error")

    def process_requirementsVacancy_step(self, message, projectId, post):
        try:
            bot = self.bot
            
            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return

            requirements = message.text

            if len(requirements) < 8:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–∏:', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_requirementsVacancy_step, projectId, post)
                return

            msg = bot.reply_to(message, f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ *¬´{self.auxiliary.filter(post)}¬ª*\:', parse_mode="MarkdownV2")
            bot.register_next_step_handler(msg, self.process_descriptionVacancy_step, projectId, post, requirements)  
        except Exception as e:
            print(e)
            self.auxiliary.exitStepHandler(message, "error")

    def process_descriptionVacancy_step(self, message, projectId, post, requirements):
        try:
            bot = self.bot
            
            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return

            description = message.text

            if len(description) < 8:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_descriptionVacancy_step, projectId, post, requirements)
                return

            msg = bot.reply_to(message, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏\:\n\(_TG\: \@username\; mail\: exmpl@gmail\.com\; \+79993457676\; –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω_\)', parse_mode="MarkdownV2")
            bot.register_next_step_handler(msg, self.process_contactsVacancy_step, projectId, post, requirements, description)  
        except Exception as e:
            print(e)
            self.auxiliary.exitStepHandler(message, "error")

    def process_contactsVacancy_step(self, message, projectId, post, requirements, description):
        try:
            bot = self.bot
            
            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return

            contacts = message.text

            if len(contacts) < 4:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\(_TG\: \@username\; mail\: exmpl@mail\.ru\; \+79993457676\; –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω_\)', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_contactsVacancy_step, projectId, post, requirements, description)
                return

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('üî¥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥', 'üü¢ –í—Å–µ –≤–µ—Ä–Ω–æ')

            projectName = self.db.getProjectNameById(projectId)

            msg = bot.send_message(message.chat.id, f'''–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:
                                
–í–∞–∫–∞–Ω—Å–∏—è –≤ —Å—Ç–∞—Ä—Ç–∞–ø *¬´{self.auxiliary.filter(projectName)}¬ª*\:

_–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:_ *{self.auxiliary.filter(post)}*

_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:_ *{self.auxiliary.filter(requirements)}*

_–û–ø–∏—Å–∞–Ω–∏–µ:_ *{self.auxiliary.filter(description)}* 

_–ö–æ–Ω—Ç–∞–∫—Ç—ã:_ *{self.auxiliary.filter(contacts)}*''', parse_mode="MarkdownV2", reply_markup=markup)
            bot.register_next_step_handler(msg, self.process_isRepeatFillingVacancy_step, projectId, post, requirements, description, contacts) 
        except Exception as e:
            print(e)
            self.auxiliary.exitStepHandler(message, "error")

    def process_isRepeatFillingVacancy_step(self, message, projectId, post, requirements, description, contacts):
        try:
            if message.text == "üî¥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥":
                self.addNewVacancy(message.chat.id, projectId)
            elif message.text == "üü¢ –í—Å–µ –≤–µ—Ä–Ω–æ":
                bot = self.bot
                cursor = self.cursor
                connection = self.connection

                cursor.execute(f'''INSERT INTO vacancies (post, requirements, job_description, contacts, projectid, isActive, newVacancy) VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id''', 
                            (post, requirements, description, contacts, projectId, True, True))
                newVacancyId = cursor.fetchone()[0]
                connection.commit()
                
                cursor.execute("SELECT id FROM users WHERE status && '{PROJECT_MANAGER}';")
                projectManagerId = cursor.fetchone()[0]

                bot.send_message(projectManagerId, f"–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ *¬´{self.auxiliary.filter(self.db.getProjectNameById(projectId))}¬ª*", parse_mode="Markdown", reply_markup=self.keyboard.markupExcelVacancies())

                self.auxiliary.exitStepHandler(message, "ok")
            else:   
                msg = bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä", parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_isRepeatFillingVacancy_step, projectId, post, requirements, description, contacts)

        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")


