import re
from telebot import types
import datetime

import config
from databaseRequests import DatabaseRequests
from keyboards import Keyboards
from auxiliary import Auxiliary

class EventsController:
    def __init__(self, bot, connection):
        self.bot = bot

        self.connection = connection

        cursor = connection.cursor()
        self.cursor = cursor

        self.db = DatabaseRequests(connection)
        self.keyboard = Keyboards(connection)
        self.auxiliary = Auxiliary(bot, connection)

# -------------- Insert new event steps
    def createNewEvent(self, chatId):
        bot = self.bot

        msg = bot.send_message(chat_id=chatId, text=f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n(_–î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ –ß–∞—Å:–ú–∏–Ω_)", parse_mode="Markdown", reply_markup=self.keyboard.exitBtn())
        bot.register_next_step_handler(msg, self.process_meetingDate_step)
    
    def process_meetingDate_step(self, message):
        try:
            bot = self.bot
            
            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return
            
            meetingDate = message.text
            
            now = datetime.datetime.now()
            try:
                dt = datetime.datetime.strptime(meetingDate, "%d.%m.%y %H:%M")
                if dt <= now:
                    msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n(–ü—Ä–∏–º–µ—Ä: _18.11.23 17:00_)', parse_mode="Markdown")
                    bot.register_next_step_handler(msg, self.process_meetingDate_step)                
                    return
            except Exception as e:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n(–ü—Ä–∏–º–µ—Ä: _18.11.23 17:00_)', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_meetingDate_step)
                return
        
            msg = bot.reply_to(message, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', parse_mode="Markdown")
            bot.register_next_step_handler(msg, self.process_nameEvent_step, meetingDate) 
            
        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")

    def process_nameEvent_step(self, message, meetingDate):
        try:
            bot = self.bot
            
            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return
            
            nameEvent = message.text

            if len(nameEvent) < 5:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_nameEvent_step, meetingDate)
                return

            msg = bot.reply_to(message, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:', parse_mode="Markdown")
            bot.register_next_step_handler(msg, self.process_descriptionEvent_step, meetingDate, nameEvent) 
            
        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")

    def process_descriptionEvent_step(self, message, meetingDate, nameEvent):
        try:
            bot = self.bot

            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return
            
            description = message.text

            if len(description) < 8:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_descriptionEvent_step, meetingDate, nameEvent)
                return

            msg = bot.reply_to(message, '–î–µ–¥–ª–∞–π–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n(_–î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ –ß–∞—Å:–ú–∏–Ω_)', parse_mode="Markdown")
            bot.register_next_step_handler(msg, self.process_deadlineEvent_step, meetingDate, nameEvent, description) 
            
        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")

    def process_deadlineEvent_step(self, message, meetingDate, nameEvent, description):
        try:
            bot = self.bot

            if message.text == "‚Ü© –í—ã–π—Ç–∏":
                self.auxiliary.exitStepHandler(message, "ok")
                return
            
            deadline = message.text

            now = datetime.datetime.now()
            try:
                dt = datetime.datetime.strptime(deadline, "%d.%m.%y %H:%M")
                deadlineMin = int(dt.strftime('%M'))

                if dt <= now or dt >= datetime.datetime.strptime(meetingDate, "%d.%m.%y %H:%M") or deadlineMin % 5 != 0:
                    msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n(–ü—Ä–∏–º–µ—Ä: _17.11.23 21:00_)', parse_mode="Markdown")
                    bot.register_next_step_handler(msg, self.process_deadlineEvent_step, meetingDate, nameEvent, description)
                    return
                
            except Exception as e:
                msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n(–ü—Ä–∏–º–µ—Ä: _17.11.23 21:00_)', parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_deadlineEvent_step, meetingDate, nameEvent, description)
                return

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('üî¥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥', 'üü¢ –í—Å–µ –≤–µ—Ä–Ω–æ')

            msg = bot.send_message(message.chat.id , f'''__–û–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º\. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?__
                            
    *{self.auxiliary.filter(meetingDate)}* —Å–æ—Å—Ç–æ–∏—Ç—Å—è –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\!
    __{self.auxiliary.filter(nameEvent)}__
    {self.auxiliary.filter(description)}

    _*–î–µ–¥–ª–∞–π–Ω –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é:* {self.auxiliary.filter(deadline)}_''', parse_mode="MarkdownV2", reply_markup=markup)
            bot.register_next_step_handler(msg, self.process_isRepeatFillingEvent_step, meetingDate, nameEvent, description, deadline) 
            
        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")

    def process_isRepeatFillingEvent_step(self, message, meetingDate, nameEvent, description, deadline):
        try:
            bot = self.bot
            cursor = self.cursor
            connection = self.connection

            if message.text == "üî¥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥":
                self.createNewEvent(message.chat.id)
            elif message.text == "üü¢ –í—Å–µ –≤–µ—Ä–Ω–æ":

                question = f"{nameEvent} - {meetingDate}"
                options = ["–ü—Ä–∏–¥—É", "–ù–µ —Å–º–æ–≥—É"]
                bot.send_message(chat_id=config.RESIDENT_GROUP_ID, text=f'''*{self.auxiliary.filter(meetingDate)}* —Å–æ—Å—Ç–æ–∏—Ç—Å—è –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\!
    __{self.auxiliary.filter(nameEvent)}__
    {self.auxiliary.filter(description)}

    _*–î–µ–¥–ª–∞–π–Ω –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é:* {self.auxiliary.filter(deadline)}_''', parse_mode="MarkdownV2")
                pollMessage = bot.send_poll(chat_id=config.RESIDENT_GROUP_ID, question=question, options=options, is_anonymous=False)

                meetingDate = f"{meetingDate.split('.')[1]}.{meetingDate.split('.')[0]}.{meetingDate[6:]}"
                deadline = f"{deadline.split('.')[1]}.{deadline.split('.')[0]}.{deadline[6:]}"

                cursor.execute(f'''INSERT INTO events (id, name, description, meetingdate, isactive, polldeadline) VALUES (%s, %s, %s, %s, %s, %s)''', 
                            (pollMessage.json['poll']['id'], nameEvent, description, meetingDate, True, deadline))
                connection.commit()
                
                self.auxiliary.exitStepHandler(message, "ok")
            else:   
                msg = bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä", parse_mode="Markdown")
                bot.register_next_step_handler(msg, self.process_isRepeatFillingEvent_step, meetingDate, description, deadline)

        except Exception as ex:
            print("Error: ", ex)
            self.auxiliary.exitStepHandler(message, "error")


# -------------- Newsletters in poll deadline
    def eventDeadlineNewsletter(self, events):
        try:
            bot = self.bot
            cursor = self.cursor
            connection = self.connection
            
            cursor.execute("SELECT id FROM users WHERE status && '{DOCUMENT_MANAGER}';")
            docManagerId = cursor.fetchone()[0]

            for id in events:
                cursor.execute(f"UPDATE events SET isactive = false WHERE id = '{id[0]}';")
                connection.commit()

                cursor.execute(f'''SELECT COUNT(*) FROM events_users WHERE eventid='{id[0]}' AND isgoingtocome = true;''')
                countOfPlanningToCome = cursor.fetchone()[0]

                cursor.execute(f'''SELECT COUNT(*) FROM events_users 
                            INNER JOIN users ON events_users.userid=users.id
                            WHERE eventid='{id[0]}' AND isgoingtocome=true AND educationalinstitution='–†–≠–£ –∏–º. –ì.–í. –ü–ª–µ—Ö–∞–Ω–æ–≤–∞';''')
                countOfFromREA = cursor.fetchone()[0]
                countOfFromAnother = countOfPlanningToCome - countOfFromREA

                cursor.execute(f'''SELECT COUNT(*) FROM events_users WHERE eventid='{id[0]}' AND isgoingtocome = true AND needmemo = true;''')
                countOfneedMemo = cursor.fetchone()[0]

                cursor.execute(f'''SELECT COUNT(*) FROM events_users WHERE eventid='{id[0]}' AND isgoingtocome = true AND needpass = true;''')
                countOfneedPass = cursor.fetchone()[0]

                NameAndMeetingDate = self.db.getEventNameAndMeetingDateById(id[0])

                bot.send_message(docManagerId, f'''–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ *¬´{self.auxiliary.filter(NameAndMeetingDate[0])}¬ª* \- _{self.auxiliary.filter(str(NameAndMeetingDate[1].strftime('%d.%m.%Y %H:%M')))}_:

    *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å:* {countOfPlanningToCome} —á–µ–ª\.
    *–†–µ–∑–∏–¥–µ–Ω—Ç—ã –∏–∑ –†–≠–£:* {countOfFromREA} —á–µ–ª\.
    *–†–µ–∑–∏–¥–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –í–£–ó–æ–≤:* {countOfFromAnother} —á–µ–ª\.
    *–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É:* {countOfneedMemo} —á–µ–ª\.
    *–ó–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é:* {countOfneedPass} —á–µ–ª\.''', parse_mode="MarkdownV2")
                
                if countOfneedMemo > 0:
                    query_string = f'''SELECT users.id, CONCAT('@', username) AS username, lastname, firstname, patronymic, faculty, course, direction, speciality, "group" 
                                        FROM events_users 
                                        INNER JOIN users ON events_users.userid=users.id
                                        WHERE eventid='{id[0]}' AND isgoingtocome = true AND needmemo = true;'''
                    filepath = "needMemoList.xlsx"

                    self.auxiliary.export_to_excel(query_string,("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–§–∞–∫—É–ª—å—Ç–µ—Ç", "–ö—É—Ä—Å", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ì—Ä—É–ø–ø–∞"), filepath)
                    with open('needMemoList.xlsx', 'rb') as tmp:
                        bot.send_document(chat_id=docManagerId, document=tmp, caption="–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö —Å–ª—É–∂–µ–±–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ")

                if countOfneedPass > 0:
                    query_string = f'''SELECT users.id, CONCAT('@', username) AS username, lastname, firstname, patronymic, seriespassport, numberpassport
                                        FROM events_users 
                                        INNER JOIN users ON events_users.userid=users.id
                                        WHERE eventid='{id[0]}' AND isgoingtocome = true AND needpass = true;'''
                    filepath = "needPassList.xlsx"

                    self.auxiliary.export_to_excel(query_string,("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞", "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"), filepath)
                    with open('needPassList.xlsx', 'rb') as tmp:
                        bot.send_document(chat_id=docManagerId, document=tmp, caption="–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö –ø—Ä–æ–ø—É—Å–∫")

                self.eventDeadlineNewsletterForResidents(id[0])
        except Exception as e:
            print("Error in Newsletter For DocManager: ", e)

    def eventDeadlineNewsletterForResidents(self, eventId):
        try:
            bot = self.bot
            cursor = self.cursor
            
            cursor.execute(f'''SELECT userid FROM events_users WHERE eventid='{eventId}' AND isgoingtocome = true;''')
            isGoingToComeUserIds = cursor.fetchall()
            nameAndMeetingDate = self.db.getEventNameAndMeetingDateById(eventId)

            for userId in isGoingToComeUserIds:
                bot.send_message(userId[0], f'''–ü—Ä–∏–≤–µ—Ç\! –ú—ã –∂–¥–µ–º —Ç–µ–±—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ *¬´{self.auxiliary.filter(nameAndMeetingDate[0])}¬ª*, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∑–∞–ø–∏—Å–∞–ª—Å—è\! –û–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç—Å—è _{self.auxiliary.filter(str(self.NameAndMeetingDate[1].strftime('%d.%m.%Y %H:%M')))}_\.''', parse_mode="MarkdownV2")
        except Exception as e:
            print("Error in Newsletter For Residents: ", e)

    def isTimeToNewsletterForDocManager(self):
        try:
            cursor = self.cursor
            
            now = datetime.datetime.now() 
            current_time = now.strftime("%Y-%m-%d %H:%M")
            print(current_time)

            cursor.execute(f'''SELECT id, polldeadline FROM events WHERE 
                                EXISTS (SELECT polldeadline FROM events 
                                WHERE isactive=true and polldeadline='{current_time}') 
                                and isactive=true and polldeadline='{current_time}';''')
            events = cursor.fetchall()

            if len(events) > 0:
                self.eventDeadlineNewsletter(events)
        except Exception as e:
            print("Error in isTimeToNewsletterForDocManager(): " + e)